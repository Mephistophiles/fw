* fw

** What this is, and isn't
   ~fw~ is a tool I wrote to do my bidding. It might not work for you if your workflow differs a lot from mine or might require adjustments.
   Here are the assumptions:

   - flat project structure (I have everything in a ~workspace~ directory)
   - only git repositories
   - only ssh clone (easily resolveable by putting more work in the git2 bindings usage)
   - ~ssh-agent~ based authentication

*** If you can live with all of the above, you get:
    - workspace persistence (I can ~rm -rf~ my entire workspace and have it back in a few minutes)
    - ZERO overhead project switching with the ~workon~ function (need to activate ~nvm~? Run ~sbt~? Set LCD brightness to 100%? ~fw~ will do all that for you)
    - (WIP) zsh completions on the project names for ~workon~
    - (WIP) generate projectile configuration for all your project (no need to ~projectile-add-known-project~ every time you clone some shit, it will just work)

** Installation
   #+BEGIN_SRC bash
   cargo install
   #+END_SRC

   You will also want to add the following hack to your ~.zshrc.local~ or the ~workon~ automation will not work:
   #+BEGIN_SRC bash
   workon () {
     SCRIPT="$(~/.cargo/bin/fw gen-workon $@)"
     if [ $? -eq 0 ]; then
       eval "$SCRIPT"
     else
       printf "$SCRIPT\n"
     fi
   }
   #+END_SRC

   I suggest you thoroughly think this through because it will eval the stdout created by ~fw~ in your shell when you run the ~workon~ function.

** Usage
   Initial setup is done with

  #+BEGIN_SRC bash
  ~/.cargo/bin/fw -vvv setup DIR
  #+END_SRC

  This will look through ~DIR~ (flat structure!) and inspect all git repositories, then write ~.fw.json~ in your home.
  You can edit that file manually to add stuff.

  From now on you can

  #+BEGIN_SRC bash
  ~/.cargo/bin/fw -vvv sync
  #+END_SRC

  which will clone all missing projects that are described by ~.fw.json~ but not present in your workspace.
  The ~fw.json~ file is portable as long as you change the ~workspace~ attribute, so you can share the file with your colleagues.
  You can also add shell code to the ~after_clone~ and ~after_workon~ fields on a per-project basis.
  ~after_clone~ will be executed after cloning the project (interpreter is ~sh~) and ~after_workon~ will be executed each time you ~workon~ into the project.

** workon usage
  Just

  #+BEGIN_SRC bash
  workon MYPROJECT
  #+END_SRC

It will drop you into the project folder and execute all the hooks.
